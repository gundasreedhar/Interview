//String and StringBuffer, both are Final classes, default value of String is null 
//String literals are always stored in string constant pool(scp), in scp no duplicates are allowed
//String s1="abc"; and String s2= "abc"; before creating s2 it checks for same object is present are not in scp if present it will point to same reference i.e s1
//String is immutable meaning modification is not allowed, StringBuffer is mutable

public class StringManupulation {
	String strin;

	StringManupulation(String str) {
		this.strin = str;
	}

	public static void main(String[] args) {
		String s = "abc";
		s.concat("xyz");// concat is used to combine two objects and returns new object
		System.out.println(s); // abc
		String str = s.concat("xyz");
		System.out.println(str);// abcxyz

		StringBuffer sb = new StringBuffer("pqr");
		sb.append("mno");
		System.out.println(sb);// pqrmno coz immutable

		String s1 = "qwe";
		s1 = s1.concat("xyz");
		System.out.println(s1); // qwexyz
		// output seems like object has changed(mutable) but it not, concat is assigned
		// to same var s1 so internally an object called "qwexyz" gets created and s1
		// points to same object(qwexyz) the link of s1 to "qwe" is lost and pointed to
		// "qwexyz"
		/******************************************************************************************************/
		// object class equals method compares reference comparison
		// String overrides equals method and does content comparison
		// StringBuffer doesn't override equals so object class equal method gets called
		// and reference gets compaired

		String a = "mno";
		String b = "mno";
		System.out.println(a.equals(b)); // true
		System.out.println(a == b); // true

		StringManupulation sm1 = new StringManupulation("mno");
		StringManupulation sm2 = new StringManupulation("mno");
		System.out.println(sm1.equals(sm2));// false
		System.out.println(sm1 == sm2); // false
		/******************************************************************************************************/
		// toString is from object class it returns class@hashcode
		// hashcode is UID of an object generated by JVM
		// In String, StringBuffer and all wrapper class toString is overridden and
		// returns content of the object
		// printing reference will automatically call toString method

		StringManupulation stm1 = new StringManupulation("jkl");
		System.out.println(stm1);// StringManupulation@15db9742
		// after overriding tostring method
		System.out.println(stm1);// StringManupulation [strin=jkl]

		// Convert String to StringBuffer
		String ss = "hjk";
		StringBuffer sb1 = new StringBuffer(ss);
		// StringBuffer to String
		System.out.println(sb1.toString());
// in any case if you want return type as string then call toString method
	}

	@Override
	public String toString() {
		return "StringManupulation [strin=" + strin + "]";
	}
}